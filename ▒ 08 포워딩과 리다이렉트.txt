■■■ 포워딩(Forwarding)과 리다이렉트(Redirect) ■■■

//@ 찬호가 미화한테 가서, 볶음밥 만들어 주세요,, 양파넣고,,, 소세지 빼주시고 꼬들꼬들하게 볶아서 만들어 주세요.
//@ 미화: 저희집에서는 더이상 볶음밥을 판매하지 않습니다. 메모지에 주소 적어 주실테니까 주소 찾아가셔서
//@ 볶음밥 다시 구매하셔야 할 것 같아요. 새 주소 찬호에게 줬더니.... 옆에 승균이네 주소가 적혀 있음.
//@ 승균이네 찾아가서, 미화에게 했던 얘기 그대로 다시 함.(Like 관공서에 전화하면 담당자 바꿔드릴게용.....새로얘기해야하는것처럼)
//@ 그럼 찬호(클라이언트)가 힘들긴함ㅋㅋㅋ
//@ --> 이게 리다이렉트!

//@ 미화가 주문받고 나지금 짜장 만드느라 바빠서 그런데 너가 볶음밥만들어줘!(주문대로)
//@ 승균이가 그거 만들고 미화에게 줌, 그거 찬호에게 전달... 혹은 승균이가 그대로 찬호에게 전달!
//@ 찬호는 누구에게전달전달해서 왔는지 모름... 잘못 전달되면 미화님 멱살을 잡을것ㅋㅋㅋㅋㅋㅋㅋㅋ
//@ 컨테이너안에서만 : 주방 안에서만!
//@ --> 이게 포워딩!

//@ 용어, 개념 기억하기~!!!

○ 포워딩(Forwarding)

   요청을 포워딩할 때 해당 요청은 서버의 다른 자원에 전달된다.
   이 때에는 다른 자원에서 이 요청을 처리할 것을 클라이언트에게 알리지 않는다.
   이와 같은 방식의 처리는 웹 컨테이너 안에서만 일어나고
   클라이언트는 알 수 없게 된다.
  
   포워딩은 리다이렉트와 다르게
   객체를 요청에 담고 해당 요청을 사용할 다음 자원에 전송한다.
   따라서 클라이언트는 포워딩이 발생한 사실을 알지 못하는 것이다.
   포워딩은 클라이언트와 통신 없이 서버에서만 처리되기 때문에
   리다이렉트보다 나은 성능을 갖는다고 할 수 있다.


○ 리다이렉트(Redirect)
//@ 리디렉션이라고도 함!
    
   클라이언트의 요청을 처리한 후
   컨테이너는 『sendRedirect()』 메소드가 호출되면 브라우저에 응답을 보낸다.
   이 응답에는 브라우저가 웹 컨테이너의 응답을 받은 후
   다시 요청을 보낼 새로운 URL 이 포함되어 있다.
   여기에서 하나의 요청이 종결된다.
   새로 부여받은 URL 로 브라우저가 완전히 새롭게 요청하기 때문에
   이전의 요청 스코프에 저장되어 있던 객체는
   새로운 요청이 이루어지기 전에 소멸된다.
   리다이렉트는 추가적으로 발생한 왕복 처리 때문에 포워딩보다 느리다고 할 수 있다.

   기억해야 할 것은...
   최종적으로 수행해야 하는 작업은 새로운 요청에 의한 것이고
   이것을 클라이언트가 알고 있기 때문에
   브라우저 창의 주소가 처음 요청한 주소가 아니고
   최종 주소 값으로 변하게 된다.
   또한, 하나의 요청에 담겨 있던 객체들은 소멸되고
   다음 작업까지 전달되지 않는다.


※ 기본적으로 클라이언트의 입장에서 편한 것은 포워딩이지만
   DB 에서 작업이 이루어지고 다시 그에 대한 응답을 받은 클라이언트가
   새로운 요청을 하게끔 만들어야 하는 경우는 리다이렉트를 사용해야 한다.













